#include <stdlib.h>
#include <iostream>


int* stackMemory1() //функция, возвращающая указатель на целочисленное значение.
{
    int a = 1; //инициализация переменной а со значением 1.
    return &a; //возвращение указателя на переменную а.
}

int* stackMemory2()

{
    int b = 2; //инициализация переменной b со значением 2.
    return &b; //возвращение указателя на переменную b.
}

int main()
{
    int* b = stackMemory1(); //Вызов функции stackMemory1 и сохранение возвращенного указателя в b.
    int a1 = *b;

    /*1) разыменование указателя b, что означает извлечение значения, на которое указывает этот указатель.
      2) b содержит адрес переменной a, объявленной внутри функции stackMemory1().
      3) извлеченное значение присваивается переменной a1, то есть устанавливается в 1.*/

    int* c = stackMemory2();
    int a2 = *c;

    /*1) разыменование указателя с, что означает извлечение значения, на которое указывает этот указатель.
      2) с содержит адрес переменной "b", объявленной внутри функции stackMemory1().
      3) извлеченное значение присваивается переменной a2, то есть устанавливается в 2.*/

    int a3 = *b;

    /*1) разыменование указателя b, что означает извлечение значения, на которое указывает этот указатель.
      2) b указывает на переменную b, объявленную внутри функции stackMemory2(), так как она была перезаписана в предыдущей строке.
      3) a3 принимает значение переменной b, которая была установлена равной 2 внутри функции stackMemory2().
      4) a3 содержит значение 2 как в случае с a1.*/

    std::cout << a1 << std::endl; 
    std::cout << a2 << std::endl; 
    std::cout << a3 << std::endl; 
    std::cout << ((std::byte*)b - (std::byte*)c) << std::endl;
    //разница между указателями b и c в байтах.

    return 0;
}