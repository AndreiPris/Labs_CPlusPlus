#include <iostream>

static int function(int num)
{
    int b = num;
    return b;
}

int main()
{
    std::cout << function(100) << std::endl;
    return 0;
}

//Описание
//Я определил функцию function как в файле main.cpp, так и в f.cpp.При попытке компиляции обоих файлов одновременно возникает ошибка.Это происходит из - за того, что функция function объявлена в обоих файлах без определения, и компилятор не может определить, какую версию функции следует использовать.
//После добавления модификатора static к функции function в файле f.cpp, видимость этой функции ограничивается только в пределах этого файла. В результате при попытке компиляции обоих файлов одновременно возникает ошибка.Функция function объявлена в main.cpp, но не определена, а в f.cpp она определена с модификатором static, что делает её видимой только в пределах этого файла.Компилятор не может найти определение функции hello в main.cpp из - за ограниченной видимости в f.cpp, что приводит к ошибке компиляции.
//Если вставить определение функции Function в файл main.cpp, с сопровождением модификатора static, и затем провести компиляцию, ошибок не возникнет.Это обусловлено тем, что, несмотря на модификатор static, который ограничивает видимость функции для других файлов, мы находимся в контексте только файла main.cpp, где функция Function была объявлена и определена.
//В финале будет скомпилирована только одна копия тела функции.